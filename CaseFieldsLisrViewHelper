({
    SearchCase : function(component, event) {
        
        
        var searchText = component.get('v.searchKeyWord');
        searchText = searchText.trim();
        if (!!searchText){
            component.set('v.isButtonActive',false);
            var typefield = component.get('v.pickList');
            var recordsPerPage = component.get('v.recordsPerPage'); 
            
            var pageNumber = component.get('v.pageNumber')|| 1;
            
            
            var action = component.get('c.fetchCase');
            action.setParams({searchKeyWord:searchText, typeField: typefield, recordsPerPage:recordsPerPage, pageNumber: pageNumber} );
            action.setCallback(this, function(response) {
                var state = response.getState();
                var cases;
                var labels;
                var pages;
                if (state === 'SUCCESS') {
                    cases = response.getReturnValue().objects;
                    labels = response.getReturnValue().listOfMaps;
                    pages = response.getReturnValue().countPages;
                    var resultData = response.getReturnValue().objects;
                    
                    
                    cases.forEach(function(field){
                        field.CaseLink = '/' + field.Id;
                    });
                }
                component.set("v.dataSize", cases.length);
                component.set("v.data", cases);
                component.set('v.mycolumns', labels);
                
            });
            
            $A.enqueueAction(action);
        }else{
            component.set("v.isButtonActive", true);
        }
    },
    countPages: function(component, event){
        var typefield = component.get('v.pickList');
        var recordsPerPage = component.get('v.recordsPerPage'); 
        var searchText = component.get('v.searchKeyWord');
        var someAction = component.get('c.countPages');
        
        someAction.setParams({searchKeyWord:searchText, recordsPerPage:recordsPerPage, typeField: typefield} );
        
        someAction.setCallback(this, function(response) {
            var state = response.getState();
            var pages;
            if (state === 'SUCCESS') {
                pages = response.getReturnValue();
                component.set("v.countPages",pages);
                
                var disableButtonNext = component.get("v.countPages");
                
                if(disableButtonNext == 1 || disableButtonNext==0){
                    component.set('v.isLastPage', true);
                }else{
                    component.set('v.isLastPage', false);
                }
            }
        })
        $A.enqueueAction(someAction);
    },
})
